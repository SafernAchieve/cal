[{"C:\\Users\\Safern\\Downloads\\cal\\src\\index.js":"1","C:\\Users\\Safern\\Downloads\\cal\\src\\reportWebVitals.js":"2","C:\\Users\\Safern\\Downloads\\cal\\src\\App.js":"3","C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\Calendar.js":"4","C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\event_loader.js":"5","C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\resources.js":"6"},{"size":500,"mtime":1734445930374,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1734445930434,"results":"9","hashOfConfig":"8"},{"size":215,"mtime":1734445930286,"results":"10","hashOfConfig":"8"},{"size":10759,"mtime":1734638234162,"results":"11","hashOfConfig":"8"},{"size":447,"mtime":1734619278103,"results":"12","hashOfConfig":"8"},{"size":13954,"mtime":1734459283829,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"imwnhy",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Safern\\Downloads\\cal\\src\\index.js",[],["29","30"],"C:\\Users\\Safern\\Downloads\\cal\\src\\reportWebVitals.js",[],"C:\\Users\\Safern\\Downloads\\cal\\src\\App.js",[],"C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\Calendar.js",["31","32","33","34","35","36","37","38","39"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { DayPilot, DayPilotCalendar } from \"daypilot-pro-react\";\nimport { getEvents } from \"./event_loader\";\nimport resources_obj from \"./resources\";\nimport TimePicker from 'react-time-picker';\nconst Calendar = () => {\n  const [selectedPurpose, setSelectedPurpose] = useState(\"All\");\n  const [selectedLocation, setSelectedLocation] = useState(\"All\");\n  const [startDate, setStartDate] = useState(\"2024-12-16\");\n  const [endDate, setEndDate] = useState(\"2024-12-25\");\n  const [loading, setLoading] = useState(true);\n  const [events, setEvents] = useState([]);\n  const [selectedEvents, setSelectedEvents] = useState([]);\n  const [selectedName, setSelectedName] = useState(\"All\");\n  const [zoomLevel, setZoomLevel] = useState(1); \n  const [startTime, setStartTime] = useState(\"14\"); \n  const [endTime, setEndTime] = useState(\"19\"); \n\n\n\n\n\n  \n  const [config, setConfig] = useState({\n    locale: \"en-us\",\n    columnWidthSpec: \"Auto\",\n    viewType: \"Resources\",\n    headerLevels: 1,\n    headerHeight: 30,\n    cellHeight: 30,\n    crosshairType: \"Header\",\n    showCurrentTime: false,\n\n    businessBeginsHour : startTime,\n    businessEndsHour : endTime,\n    showNonBusiness: false,\n    \n    // eventArrangement: \"Cascade\",\n    allowEventOverlap: true,\n    timeRangeSelectedHandling: \"Enabled\",\n    onTimeRangeSelected: async (args) => {\n      const modal = await DayPilot.Modal.prompt(\n        \"Create a new event:\",\n        \"Event 1\"\n      );\n      const dp = args.control;\n      dp.clearSelection();\n      if (modal.canceled) {\n        return;\n      }\n\n      const newEvent = {\n        id: DayPilot.guid(),\n        start: args.start,\n        end: args.end,\n        text: modal.result,\n        resource: args.resource,\n      };\n      setEvents((prevEvents) => [...prevEvents, newEvent]);\n    },\n    eventDeleteHandling: \"Disabled\",\n    eventMoveHandling: \"Update\",\n\n    onEventMoved: (args) => {\n      setEvents((prevEvents) =>\n        prevEvents.map((event) =>\n          event.id === args.e.id()\n            ? {\n                ...event,\n                start: args.newStart,\n                end: args.newEnd,\n                resource: args.newResource,\n              }\n            : event\n        )\n      );\n    },\n    eventResizeHandling: \"Update\",\n    onEventResized: (args) => {\n      setEvents((prevEvents) =>\n        prevEvents.map((event) =>\n          event.id === args.e.id()\n            ? { ...event, start: args.newStart, end: args.newEnd }\n            : event\n        )\n      );\n    },\n   \n    eventClickHandling: \"Disabled\",\n    eventHoverHandling: \"Disabled\",\n  });\n\n  const calendarRef = useRef(null);\n\n\n\n  const handleStartTimeChange = (e) => {\n    const time = e.target.value;  // Time in HH:mm format (e.g., \"14:30\")\n     // Set the full time string in HH:mm format\n\n    // Extract the hour and update the config with just the hour part\n    const businessBeginsHour = parseInt(time.split(\":\")[0], 10); // Extract hour from \"HH:mm\"\n    setStartTime(time);\nsetEndTime(20)\n\n\n\n    // Update config object with the extracted hour\n    setConfig((prevConfig) => ({\n      ...prevConfig,\n      businessBeginsHour: 16, // Update with just the hour\n      businessEndsHour: endTime\n    }));\n   \n  };\n\n  // Function to handle the end time change\n  const handleEndTimeChange = (e) => {\n    const time = e.target.value;  // Time in HH:mm format (e.g., \"19:00\")\n    setEndTime(time); // Set the full time string in HH:mm format\n  };\n  \n  const loadEvents = async () => {\n    const events = await getEvents(startDate, endDate);\n    console.log(\n      events\n        .map((e) => e.resources)\n        .filter((value, index, self) => self.indexOf(value) === index)\n    );\n    const e = events.map((event) => ({\n      start: new DayPilot.Date(event.start),\n      end: new DayPilot.Date(event.end),\n      \n      text: event.summary,\n      id: event.uid,\n      resource: event.resources,\n    }));\n    setEvents(e);\n    setSelectedEvents(\n      e)\n  };\n\n  useEffect(() => {\n    daysResources();\n  }, []);\n\n  useEffect(() => {\n    loadEvents();\n  }, []);\n\n\n\n  const initializeResources = (date, purpose = \"All\", location = \"All\", name = \"All\") => {\n    \n    console.log()\n    const resources = resources_obj.map((resource) => ({\n      ...resource,\n      start: date,\n    }));\n\n    return resources.filter((resource) => {\n      return (\n        (purpose === \"All\" || resource.purpose === purpose) &&\n        (location === \"All\" || resource.location === location)&&\n        (name === \"All\" || resource.name === name)\n        \n      );\n    });\n  };\n\n\n\n\n  const handleNameChange = (e) => {\n    setSelectedName(e.target.value);\n  };\n\n\n\n\n  const handlePurposeChange = (e) => {\n    setSelectedPurpose(e.target.value);\n  };\n\n  const handleLocationChange = (e) => {\n    setSelectedLocation(e.target.value);\n  };\n\n  const applyResourceFilter = () => {\n    const date = new Date();\n    const filteredResources = initializeResources(\n      date,\n      selectedPurpose,\n      selectedLocation\n    );\n\n    // setConfig((prevConfig) => ({\n    //   ...prevConfig,\n    //   columns: filteredResources.map((resource) => ({\n    //     name: resource.name,\n    //     id: resource.id,\n    //   })),\n    // }));\n    loadEvents();\n    daysResources();\n\n    // const mondays = getMondaysInRange(\"2024-11-29\", \"2025-06-01\");\n    // console.log(mondays);\n  };\n\n  function getMondaysInRange(startDate, endDate) {\n    const mondays = [];\n    let currentDate = new DayPilot.Date(startDate);\n    const end = new DayPilot.Date(endDate);\n\n    // Adjust 'currentDate' to the first Monday in the range\n    const dayOfWeek = currentDate.getDayOfWeek();\n    const daysToAdd = (1 - dayOfWeek + 7) % 7; // Calculate days to add to reach Monday\n    currentDate = currentDate.addDays(daysToAdd);\n\n    // Collect all Mondays within the range\n    while (currentDate <= end) {\n      mondays.push(currentDate.toString());\n      currentDate = currentDate.addDays(7); // Move to the next Monday\n    }\n\n    return mondays;\n  }\n\n  \n  \n  \n\n\n\n\n\n\n\n\n  const daysResources = () => {\n    const columns = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    end.setHours(23,59,59)\n    const daysDifference =\n      Math.floor((end - start) / (1000 * 60 * 60 * 24)) + 1;\n\n    // Get all events that fall within the date range\n    const allEvents = events/*.filter((event) => {\n      const eventDate = new Date(event.start);\n      return eventDate >= start && eventDate <= end;\n    });*/\n\n    for (let i = 0; i < daysDifference; i++) {\n      const currentDay = new Date(start);\n      currentDay.setDate(start.getDate() + i);\n      const dayResources = initializeResources(\n        currentDay,\n        selectedPurpose,\n        selectedLocation,\n        selectedName\n      );\n\n      \n\n      columns.push({\n        id: i,\n        name: currentDay.toLocaleDateString(\"en-US\", {\n          weekday: \"long\",\n          year: \"numeric\",\n          month: \"long\",\n          day: \"numeric\",\n        }),\n        children: dayResources,\n      });\n    }\n\n    const columnWidth =\n    selectedName !== \"All\" &&\n    selectedPurpose === \"All\" &&\n    selectedLocation === \"All\"\n      ? 210\n      : 120;\n\n    setConfig({\n      ...config,\n      columnWidthSpec: \"Fixed\",\n      columnWidth: columnWidth,\n      columns,\n      headerLevels: 2,\n      events: allEvents,\n    });\n  };\n  const endDateTillMidnight = new Date(endDate)\n  endDateTillMidnight.setHours(23,59,59)\n\nconst adjustZoom = (delta) => {\n  setZoomLevel((prev) => {\n    const newZoom = Math.min(Math.max(prev + delta, 0.2), 2); // Zoom between 0.5x and 2x\n    return newZoom;\n  });\n};\n\nuseEffect(() => {\n  // Update column and cell sizes when zoom changes\n  setConfig((prevConfig) => ({\n    ...prevConfig,\n    columnWidth: 140 * zoomLevel,\n    cellHeight: 30 * zoomLevel,\n  }));\n}, [zoomLevel]);\n\n\n  return (\n    <div>\n          <button onClick={() => adjustZoom(0.1)}>Zoom In</button>\n      <button onClick={() => adjustZoom(-0.1)}>Zoom Out</button>\n      <p>Current Zoom: {zoomLevel.toFixed(1)}x</p>\n      <div className={\"space\"}>\n        Resources view:\n        <label>\n          <input name=\"view\" type={\"radio\"} checked onClick={daysResources} />{\" \"}\n          Days/resources\n        </label>\n        <div>\n          <label>\n            Start Date:{\" \"}\n            <input\n              type=\"date\"\n              value={startDate}\n              onChange={(e) => setStartDate(e.target.value)}\n            />\n          </label>\n        </div>\n        <div>\n      \n          <label>\n            End Date:{\" \"}\n            <input\n              type=\"date\"\n              value={endDate}\n              onChange={(e) => setEndDate(e.target.value)}\n            />\n          </label>\n        </div>\n        <label>\n          Purpose:\n          <select onChange={handlePurposeChange} value={selectedPurpose}>\n            <option value=\"All\">All</option>\n            <option value=\"Play\">Play</option>\n            <option value=\"Couple\">Couple</option>\n            <option value=\"Individual\">Individual</option>\n            <option value=\"Conference Room\">Conference Room</option>\n          </select>\n        </label>\n        <label>\n          Location:\n          <select onChange={handleLocationChange} value={selectedLocation}>\n            <option value=\"All\">All</option>\n            <option value=\"RP\">RP</option>\n            <option value=\"CC\">CC</option>\n            <option value=\"Airmont\">Airmont</option>\n            <option value=\"SRR\">SRR</option>\n            <option value=\"WC\">WC</option>\n          </select>\n        </label>\n        Name:\n        <select onChange={handleNameChange} value={selectedName}>\n  <option value=\"All\">All</option> {/* Add an option for \"All\" */}\n  {resources_obj.map((resource) => (\n    <option key={resource.name} value={resource.name}>\n      {resource.name}\n    </option>\n  ))}\n</select>\n<label>\n          Start Time:{\" \"}\n          <input\n      type=\"time\"\n      value={startTime}\n      onChange={handleStartTimeChange} // Corrected onChange handler\n    />\n        </label>\n\n        <label>\n          End Time:{\" \"}\n          <input\n            type=\"time\"\n            value={endTime}\n            \n            format=\"HH:mm\"\n          />\n        </label>\n        <input\n          name=\"view\"\n          type=\"button\"\n          onClick={applyResourceFilter}\n          value=\"Search\"\n        />\n      </div>\n      <DayPilotCalendar\n        {...config}\n        ref={calendarRef}\n        events={selectedEvents}\n        startDate={startDate}\n        endDate={endDateTillMidnight}\n        idField=\"id\"\n        startField=\"start\"\n        endField=\"end\"\n        resourceField=\"resource\"\n       startTime ={startTime}\n      />\n    </div>\n  );\n};\n\nexport default Calendar;\n","C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\event_loader.js",["40","41"],"import ICAL from \"ical\";\nimport axios from \"axios\";\nimport { DayPilot, DayPilotCalendar } from \"daypilot-pro-react\";\n\nconst URL = \"http://localhost:4000/events\"\n\n\n\n\n  \nexport const getEvents = async (start, end) => {\n    const startDate = new DayPilot.Date(start)\n    const endDate = new DayPilot.Date(end)\n    const response = await axios.get(`${URL}?start=${startDate}&end=${endDate}`)\n    console.log(response.data)\n    return response.data\n}\n\n","C:\\Users\\Safern\\Downloads\\cal\\src\\calendar\\resources.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":5,"column":8,"nodeType":"48","messageId":"49","endLine":5,"endColumn":18},{"ruleId":"46","severity":1,"message":"50","line":11,"column":10,"nodeType":"48","messageId":"49","endLine":11,"endColumn":17},{"ruleId":"46","severity":1,"message":"51","line":11,"column":19,"nodeType":"48","messageId":"49","endLine":11,"endColumn":29},{"ruleId":"46","severity":1,"message":"52","line":102,"column":11,"nodeType":"48","messageId":"49","endLine":102,"endColumn":29},{"ruleId":"46","severity":1,"message":"53","line":118,"column":9,"nodeType":"48","messageId":"49","endLine":118,"endColumn":28},{"ruleId":"54","severity":1,"message":"55","line":145,"column":6,"nodeType":"56","endLine":145,"endColumn":8,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":149,"column":6,"nodeType":"56","endLine":149,"endColumn":8,"suggestions":"59"},{"ruleId":"46","severity":1,"message":"60","line":191,"column":11,"nodeType":"48","messageId":"49","endLine":191,"endColumn":28},{"ruleId":"46","severity":1,"message":"61","line":211,"column":12,"nodeType":"48","messageId":"49","endLine":211,"endColumn":29},{"ruleId":"46","severity":1,"message":"62","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"63","line":3,"column":20,"nodeType":"48","messageId":"49","endLine":3,"endColumn":36},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'TimePicker' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'businessBeginsHour' is assigned a value but never used.","'handleEndTimeChange' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'daysResources'. Either include it or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has a missing dependency: 'loadEvents'. Either include it or remove the dependency array.",["67"],"'filteredResources' is assigned a value but never used.","'getMondaysInRange' is defined but never used.","'ICAL' is defined but never used.","'DayPilotCalendar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},"Update the dependencies array to be: [daysResources]",{"range":"72","text":"73"},"Update the dependencies array to be: [loadEvents]",{"range":"74","text":"75"},[4046,4048],"[daysResources]",[4095,4097],"[loadEvents]"]